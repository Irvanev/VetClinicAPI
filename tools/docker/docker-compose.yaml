services:
  # --- Postgres with PostGIS ---
  postgres:
    image: kartoza/postgis:17-3.5
    container_name: postgres
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -P ${DB_PASSWORD}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "5432:5432"
    volumes:
      - ./db-init:/docker-entrypoint-initdb.d
      - ./pgdata:/var/lib/postgresql/data

  # --- Postgres exporter fom Prometheus ---
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: postgres-exporter
    environment:
      DATA_SOURCE_NAME: "postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/postgres?sslmode=disable"
    ports:
      - "9187:9187"
    depends_on:
      - postgres

  # --- pgAdmin ---
  pgadmin:
    image: dpage/pgadmin4:6.21
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    depends_on:
      - postgres

  # --- RabbitMQ ---
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBIT_MQ_USERNAME}
      RABBITMQ_DEFAULT_PASS: ${RABBIT_MQ_PASSWORD}
    volumes:
      - ./rabbitmq_data:/var/lib/rabbitmq
  #      - ./rabbitmq_definitions.json:/etc/rabbitmq/rabbitmq_definitions.json

  # --- Redis ---
  redis:
    image: "redis:latest"
    ports:
      - "6379:6379"
  # --- Redis exporter for Prometheus ---
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: redis-exporter
    restart: unless-stopped
    environment:
      REDIS_ADDR: "redis://redis:6379"
    ports:
      - "9121:9121"
    depends_on:
      - redis

  # --- Minio ---
  minio:
    image: minio/minio:latest
    container_name: minio
    restart: unless-stopped
    volumes:
      - minio-storage:/data
      - minio-config:/root/.minio
    environment:
      MINIO_ROOT_USER: ${MINIO_USERNAME}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
      MINIO_PROMETHEUS_AUTH_TYPE: "public"
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"

  # --- Logstash ---
  logstash:
    image: logstash:7.17.0
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ./logs/vetclinic.log:/app/logs/vetclinic.log
    ports:
      - "5000:5000"
    depends_on:
      - elasticsearch

  # --- Elasticsearch ---
  elasticsearch:
    image: elasticsearch:8.8.0
    container_name: elasticsearch
    restart: unless-stopped
    ports:
      - "9200:9200"
    environment:
      discovery.type: single-node
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms512m -Xmx512m"

  # --- Kibana ---
  kibana:
    image: kibana:8.8.0
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=["http://elasticsearch:9200"]
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  # --- Main Service ---
  main-service:
    build:
      context: ../../main-service
      dockerfile: Dockerfile
    env_file:
      - ../../.env
    volumes:
      - ./logs/vetclinic.log:/app/logs/vetclinic.log
    depends_on:
      postgres:
        condition: service_started
      rabbitmq:
        condition: service_started
      redis:
        condition: service_started
      logstash:
        condition: service_started
    ports:
      - "8080:8080"

  # --- Email Service ---
  email-service:
    build:
      context: ../../email-service
      dockerfile: Dockerfile
    env_file:
      - ../../.env
    depends_on:
      rabbitmq:
        condition: service_started
    ports:
      - "8081:8081"

  # --- Prometheus ---
  prometheus:
    image: prom/prometheus:v2.37.9
    container_name: prometheus
    ports:
      - '9090:9090'
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./data:/prometheus
    restart: unless-stopped

  # --- Grafana ---
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - '3000:3000'
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

volumes:
  pgdata:
  minio-storage:
  minio-config:
  grafana-data:

